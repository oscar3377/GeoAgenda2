package es.upm.etsisi.geoagenda2;

import android.content.ContentValues;
import android.content.Context;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * Created by Oscar on 23/10/2016.
 */

@SuppressWarnings("serial")
public class Contacto implements Serializable {

    public static ArrayList<Contacto> listaContactos = new ArrayList<>();

    int id;
    String foto;
    String nombre;
    String apellido1;
    String apellido2;
    String direccion;
    String email;
    String telefono;
    String color;

    public Contacto(int id, String nombre, String apellido1, String apellido2,
                    String direccion, String email, String telefono,
                    String foto, String color){
        this.id = id;
        this.nombre = nombre;
        this.apellido1 = apellido1;
        this.apellido2 = apellido2;
        this.direccion = direccion;
        this.email = email;
        this.telefono = telefono;
        this.foto = foto;
        this.color = color;
    }

    public ContentValues toContentValues(boolean withID) {

        ContentValues values = new ContentValues();

        values.put(ContactosSchema.ContactosEntry._ID, id);
        values.put(ContactosSchema.ContactosEntry.NOMBRE, nombre);
        values.put(ContactosSchema.ContactosEntry.APELLIDO1, apellido1);
        values.put(ContactosSchema.ContactosEntry.APELLIDO2, apellido2);
        values.put(ContactosSchema.ContactosEntry.DIRECCION, direccion);
        values.put(ContactosSchema.ContactosEntry.EMAIL, email);
        values.put(ContactosSchema.ContactosEntry.TELEFONO, telefono);
        values.put(ContactosSchema.ContactosEntry.AVATAR_URI, foto);
        values.put(ContactosSchema.ContactosEntry.COLOR, color);

        return values;
    }

    public ContentValues toContentValues() {

        ContentValues values = new ContentValues();

        values.put(ContactosSchema.ContactosEntry.NOMBRE, nombre);
        values.put(ContactosSchema.ContactosEntry.APELLIDO1, apellido1);
        values.put(ContactosSchema.ContactosEntry.APELLIDO2, apellido2);
        values.put(ContactosSchema.ContactosEntry.DIRECCION, direccion);
        values.put(ContactosSchema.ContactosEntry.EMAIL, email);
        values.put(ContactosSchema.ContactosEntry.TELEFONO, telefono);
        values.put(ContactosSchema.ContactosEntry.AVATAR_URI, foto);
        values.put(ContactosSchema.ContactosEntry.COLOR, color);

        return values;
    }

    public static enum Field {
        ID, NOMBRE, APELLIDO1, APELLIDO2, DIRECCION, EMAIL, TELEFONO, FOTO, COLOR
    }
    public String get(Field f) {
        switch (f) {
            case NOMBRE: return this.nombre;
            case APELLIDO1: return this.apellido1;
            case APELLIDO2: return this.apellido2;
            case DIRECCION: return this.direccion;
            case EMAIL: return this.email;
            case TELEFONO: return this.telefono;
            case FOTO: return this.foto;
            case COLOR: return this.color;
            case ID: default: return String.valueOf(this.id);
        }
    }
    // This method allows to get the item associated to a particular id,
    // uniquely generated by the method getId defined below
    public static Contacto getItem(int id) {
        for (Contacto item : listaContactos) {
            if (item.id == id) {
                return item;
            }
        }
        return null;
    }

    public static int getIndex(int id) {
        for (int i=0;i<listaContactos.size();i++) {
            Contacto item = listaContactos.get(i);
            if (item.id == id)
                return i;
        }
        return -1;
    }

    public static String getColor(Context context, String s) {
        final int[] colors = context.getResources().getIntArray(R.array.initial_colors);
        char inicial = s.charAt(0);
        return(String.valueOf(colors[(int) inicial - 65]));
    }


}
